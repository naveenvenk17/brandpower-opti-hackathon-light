name: CI/CD Pipeline - Dev Branch

# Trigger on push to dev branch
on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

env:
  PYTHON_VERSION: "3.11"

jobs:
  # ===========================================================================
  # Run Tests with Coverage
  # ===========================================================================
  test:
    name: Run Test Suite with Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run Tests with 100% Coverage Check
        run: |
          pytest tests/ -v \
            --cov=src \
            --cov-config=.coveragerc \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=100 \
            --junitxml=junit/test-results.xml
        env:
          # Disable Azure OpenAI for tests (uses fallback)
          AZURE_OPENAI_API_KEY: ""
      
      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-brandcompass
          fail_ci_if_error: true
      
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: junit/test-results.xml
          check_name: Test Results
      
      - name: All Tests Passed with 100% Coverage
        run: echo "All tests passed with 100% code coverage!"

  # ===========================================================================
  # Code Quality Checks
  # ===========================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Linting Tools
        run: |
          pip install ruff black isort
      
      - name: Check Code Formatting
        run: |
          black --check src/ tests/
          isort --check-only src/ tests/
      
      - name: Run Ruff Linter
        run: |
          ruff check src/ tests/
      
      - name: Code Quality Passed
        run: echo "Code quality checks passed!"
